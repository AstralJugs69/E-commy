generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int       @id @default(autoincrement())
  email                String    @unique
  passwordHash         String
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  passwordResetExpires DateTime?
  passwordResetToken   String?   @unique
  orders               Order[]
  reviews              Review[]
  cartItems            CartItem[]
  wishlistItems        WishlistItem[]
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  imageUrl    String?
  products    Product[]
}

model Product {
  id            Int         @id @default(autoincrement())
  name          String
  price         Float
  description   String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  imageUrl      String?
  stock         Int         @default(0)
  categoryId    Int?
  averageRating Float?
  reviewCount   Int         @default(0)
  orderItems    OrderItem[]
  category      Category?   @relation(fields: [categoryId], references: [id])
  reviews       Review[]
  cartItems     CartItem[]
  wishlistedBy  WishlistItem[]
}

model Order {
  id                  Int         @id @default(autoincrement())
  userId              Int
  latitude            Float?
  longitude           Float?
  status              String
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  shippingDetails     Json?
  totalAmount         Float
  locationCheckResult String?
  user                User        @relation(fields: [userId], references: [id])
  items               OrderItem[]
}

model OrderItem {
  id          Int      @id @default(autoincrement())
  orderId     Int
  productId   Int
  productName String
  quantity    Int
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id])
}

model ServiceArea {
  id             Int      @id @default(autoincrement())
  name           String   @unique
  geoJsonPolygon String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model PhoneNumber {
  id           Int      @id @default(autoincrement())
  numberString String   @unique
  status       String   @default("Offline")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId Int
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model CartItem {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  
  @@unique([userId, productId]) // Ensure uniqueness of product per user
}

model WishlistItem {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, productId]) // User can only wishlist a product once
}
